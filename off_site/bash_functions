#!/bin/bash

# Note:
# If you see some functions using "_helper_" functions, they are defined
# in $HOME/dotfiles/helpers.sh
#
# They are reusable tools that you might not want to wade through every
# time you open your bash_functions script.

# ***********
# **  SSH  **
# ***********

# sshcd - ssh to a host, retaining your current directory
#   Usage:   sshcd hostname [optional command to run]
#   Example: sshcd lfe-console ls -l
sshcd() {
    host=$1;
    shift;
    command="$*";
    path="$PWD"

    if [[ "$path" =~ $HOME/.* ]]; then
      path=${path#"$HOME/"}
      echo 'Adjusting path for HOME:' "$path"
    fi

    ssh -t "$host" "
        cd '$path'
        ${command}
        bash
    ";
}

# ***********
# **  GIT  **
# ***********

# git_setup_fork: clone your fork, add the upstream repo as a remote
#   Usage:   get_setup_fork org/repo
#   Example: git_setup_fork pcdshub/pcdsdevices
#
# Configure the defaults with the following env variables:
#   - GITHUB_USERNAME
#   - GITHUB_UPSTREAM
#   - GITHUB_ORIGIN
git_setup_fork() {
  usage="git_setup_fork org/repo"
  if [ -z "${1}" ]; then
    echo "${usage}"
    return
  fi
  REPO=$(basename "${1}")
  UPSTREAM=$(dirname "${1}")
  git clone --origin "${GITHUB_ORIGIN:-origin}" "git@github.com:${GITHUB_USERNAME:-${USER}}/${REPO}.git"
  git -C "${REPO}" remote add "${GITHUB_UPSTREAM:-upstream}" "git@github.com:${UPSTREAM}/${REPO}.git"
}

# git_sync_upstream: pull changes from upstream master, push to your master
#   Usage: git_sync_upstream
#
# Configure the defaults with the following env variables:
#   - GITHUB_UPSTREAM
#   - GITHUB_ORIGIN
#   - GITHUB_MASTER
git_sync_upstream() {
  git checkout "${GITHUB_MASTER:-master}"
  git fetch "${GITHUB_UPSTREAM:-upstream}"
  git pull "${GITHUB_UPSTREAM:-upstream}" "${GITHUB_MASTER:-master}"
  git push "${GITHUB_ORIGIN:-origin}" "${GITHUB_MASTER:-master}"
}


# **********
# ** IOCs **
# **********


# Watch a log file from a given IOC.
#  Usage: ioclog (iocname)
#  Example: ioclog ioc-xpp-gige-las01
#  Example: ioclog ioc-xpp-*-las01
ioclog() {
    # shellcheck disable=SC2086,SC2029 # allow for globbing of IOC names
    ssh psbuild-rhel7 "tail -n 50 -f /cds/data/iocData/$1/iocInfo/ioc.log"
}

# Find a currently-deployed IOC with a bit more details:
#  Usage: find_ioc (iocname)
#  Example: find_ioc ioc-xpp-gige-las01
#  Example: find_ioc ioc-xpp-.*-las01
#  Full version is available in a table here:
#       https://confluence.slac.stanford.edu/display/PCDS/EPICS+IOCs+Deployed+in+IOC+Manager
#  Note: this is derived from "whatrecord iocmanager-loader" and is run on a
#        personal cron job.
grep_ioc() {
    local ioc_name=$1
    # shellcheck disable=SC2029
    ssh psbuild-rhel7 "grep -i -e \"$ioc_name\" /cds/data/iocData/.all_iocs/iocs.txt"
}

# *****************************
# ** Python and hutch-python **
# *****************************

# ipython_debug_entrypoint
#   Start an ipython debug session with your script, and get to the PDB prompt
#   only if it encounters an error.  This could be used, for example, with
#   typhos by way of "ipython_debug_entrypoint typhos ..typhos args.."
ipython_debug_entrypoint() {
    cmd=$(which "$1")
    shift
    if [ -n "$cmd" ]; then
        set -x
        ipython -i --pdb "$cmd" -- "$@"
        set +x
    fi
}

# hutchp_dir - go to the per-hutch hutch-python configuration directory.
#   Usage: hutchp_dir (hutch_name)
#   Example: hutchp_dir rix
hutchp_dir() {
    ssh -t psbuild-rhel7 "cd /cds/group/pcds/pyps/apps/hutch-python/$1; bash"
}

# hutch_config - go to the per-hutch configuration directory.
#   Usage: hutch_config (hutch_name)
#   Example: hutch_config rix
hutch_config() {
    ssh -t psbuild-rhel7 "cd /cds/group/pcds/config/$1/; bash"
}

# ****************
# ** What now?  **
# ****************
#
# Add some more functions or modify the ones above to fit your needs.
# Also, use shellcheck to see that you're writing scripts with good syntax.
# The tool shellcheck is available in our pcds Python environment,
# or you can install it on your home machine with homebrew.
#
# For bash help, see https://tldp.org/LDP/Bash-Beginners-Guide/html/
