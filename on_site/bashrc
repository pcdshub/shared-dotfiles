#!/bin/bash

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# *******************************
# ** Prompt and basic settings **
# *******************************

# Here is where your dotfiles should be located.  Let's set this so
# we can reuse this later.
if [ -z "$dotfiles" ]; then
    export dotfiles="$HOME/dotfiles"
fi

# The following sets up your prompt to show at least the host
export PS1='\[\e[0;32m\][\u@\h  \W]\$\[\e[m\] '
export PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"'

# Your default editor will be set to vim.
#  * Having trouble using it? Try running `vimtutor`.
#  * Having trouble exiting it? Type ":wq!" to save and quit.
export EDITOR=vim

# Tell "grep" to use color, when possible
export GREP_OPTIONS="--color=auto"

# If you have aliases and functions defined, let's use them:
[ -f "$HOME/.bash_aliases" ] && source "$HOME/.bash_aliases"
# If you have additional aliases to add, put them in this file!

[ -f "$HOME/.bash_functions" ] && source "$HOME/.bash_functions"
# If you have additional functions to add, put them in this file!

# *****************************
# ** Python and hutch-python **
# *****************************

# Setup happi
export HAPPI_CFG=/cds/group/pcds/pyps/apps/hutch-python/device_config/happi.cfg

# **************************************************
# ** External scripts with common useful settings **
# **************************************************

# Add in the shared-dotfiles provided helpers:
#  This includes some longer functions which you might not want to see
#  each time you poke around with your own dotfiles.
source "$dotfiles/helpers.sh"

# This includes tokens for accessing typhos / confluence resources:
source /cds/group/pcds/pyps/conda/.tokens/typhos.sh

# This includes settings for EPICS channel access:
source /cds/group/pcds/setup/epics-ca-env.sh
#  * Essential variables such as EPICS_CA_ADDR_LIST are set here.
#  * Aliases are configured:
#     - Archiver (open firefox to the archiver management interface)
#     - ArchiveViewer (open firefox to the archive viewer)

# Configure the latest EPICS environment.
# As of the time of writing, this is a shortcut to: epicsenv-7.0.2-2.0.sh
source /cds/group/pcds/setup/epicsenv-cur.sh

# The above includes the following common shortcuts, like find_pv and all
# of the per-hutch screen shortcuts like "lfe" or "cxi".
#
# ---> source /cds/group/pcds/setup/pcds_shortcuts.sh
#
# Documentation of these shortcuts can be found here:
#    https://confluence.slac.stanford.edu/pages/viewpage.action?pageId=295099127
#
# Separately, pcds_shortcuts.sh also ensures that ensures that files you create
# in shared locations will be editable by others in your group if they are
# editable for you.  This can be important when working on shared EPICS IOCs,
# modules, etc.
#
# This is done by way of:
#   $ umask 0002
# If you type `umask -S` you will see that this corresponds to:
#   $ umask -S
#   u=rwx,g=rwx,o=rx
# Or read-write-execute for you and your group, and just read-execute for all
# others.

if [ $(echo $HOSTNAME | grep -ic -e "psana" -e "mon0" -e "drp-srcf") -eq 1 ]
then
    source /reg/g/psdm/etc/psconda.sh -py3 &> /dev/null
elif [ $(echo $HOSTNAME | grep -ic -e "xpp") -eq 1 ]
then
    export PATH=$PATH:/cds/home/opr/xppopr/bin
elif [ $(echo $HOSTNAME | grep -ic -e "mfx") -eq 1 ]
then
    export PATH=$PATH:/cds/home/opr/mfxopr/bin
fi


# ********************
# ** Tab completion **
# ********************

# Enable tab completion for common commands:
[ -f /usr/share/bash-completion/bash_completion ] && source /usr/share/bash-completion/bash_completion
# This includes things like ssh, git, and so on.
# The commands which have tab completion can be found here:
#    /usr/share/bash-completion/completions/
# You may also add your own completions in ~/.bash_completion, which will be
# automatically sourced by the above script.

# The following customize tab completion in certain ways.  If you don't like the functionality
# they add, comment or remove them:

# Ignore lower/uppercase letters when using tab completion (TMUX[tab] and tmux[tab] are equivalent).
bind "set completion-ignore-case on"

# Treat dashes/hyphens and underscores as equivalent (use_dotfiles[tab] is the same as use-dotfiles[tab]).
bind "set completion-map-case on"

# Display matches for ambiguous patterns at first tab press.
bind "set show-all-if-ambiguous on"

# Immediately add a trailing slash when autocompleting symlinks to directories.
bind "set mark-symlinked-directories on"


# *******************
# ** Fuzzy finding **
# *******************

# With this configuration, you can fuzzy find your way through your bash
# history or files in the current directory.
#
# Key bindings:
#   Ctrl-R: search through your bash history by typing a query
#   Ctrl-T: search through files in the current directory
#
# We leave this enabled by default, but if you prefer the original bash
# behavior, feel free to comment out - or remove - this section.

_FZF_SHARE_PATH="$_PCDS_CONDA_FOR_UTILS/share/fzf"
_FZF_COMPLETIONS="$_FZF_SHARE_PATH/shell/completion.bash"
_FZF_BINDINGS="$_FZF_SHARE_PATH/shell/key-bindings.bash"

pathmunge "/cds/group/pcds/pyps/apps/fzf/bin/"

[ -f "$_FZF_COMPLETIONS" ] && source "$_FZF_COMPLETIONS"
[ -f "$_FZF_BINDINGS" ] && source "$_FZF_BINDINGS"


# **********************
# ** History settings **
# **********************

# Did you know that commands you type are tracked in ~/.bash_history ?
# This section configures how history is stored and displayed.

# Append to the history file, don't overwrite it.
shopt -s histappend

# Save multi-line commands as one command.
shopt -s cmdhist

# Record each line as it gets issued.
# We don't need "export PROMPT_COMMAND" here as only bash cares about this.
PROMPT_COMMAND='history -a'

# Keep a long list of history lines, because it's convenient and we have the
# space.  Default is normally 500.
HISTSIZE=500000
HISTFILESIZE=100000

# Do not add duplicate entries to the history.
HISTCONTROL="erasedups:ignoreboth"

# Don't record some commands in our history. Add more by including :cmdname:
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"

# Show useful timestamps in our history.  See `man strftime` for what the parts
# mean.
# For example:
#    800   2022-03-10 11:37:50 $ command that_I_ran
HISTTIMEFORMAT='%Y-%m-%d %H:%M:%S $ '

# ***********************
# ** Per-host settings **
# ***********************


# Configure web proxy settings on a per-host basis.
# Tools like ``wget`` or ``curl`` will use the environment variable settings to
# proxy requests through the host "psproxy.pcdsn".
case $(hostname -s) in
    # Hosts with direct Internet access
	psbuild-* | pslogin* | cent7* )
        unset http_proxy;
        unset https_proxy;
		;;

    # Hosts with no access to psproxy.pcdsn
	 mcclogin | lcls-* )
        unset http_proxy;
        unset https_proxy;
		;;

    # Other hosts likely do not have direct Internet access
    * )
        export http_proxy=http://psproxy.pcdsn:3128;
        export https_proxy=http://psproxy.pcdsn:3128;
        ;;
esac

# ***********************
# ** PATH modification **
# ***********************

# ``pathmunge`` is a utility which will modify your PATH.  It adds a path
# to the beginning of the variable PATH, which is where your shell looks for
# executables and scripts.
pathmunge /reg/common/tools/bin
# /reg/common/tools/bin contains scripts such as:
#  * Tools for inspecting or interacting with released EPICS modules:
#     - epics-checkout
#     - epics-release
#     - epics-versions (and other eco_tools)
#     - svnIocToGit
#     - svnModuleToGit
#  * Tools for inspecting or modifying networking configuration:
#     - netconfig
#     - digiconfig
#     - psipmi

pathmunge /reg/g/pcds/engineering_tools/latest-released/scripts
# /reg/g/pcds/engineering_tools/latest-released/scripts
#  * General tools of use to ECS engineers
#    For documentation, see: https://github.com/pcdshub/engineering_tools

# *Optional*
# Do you work in a specific hutch? You may want to use their utilities.
# Uncomment applicable ones here:
#     pathmunge /cds/home/opr/cxiopr/bin
#     pathmunge /cds/home/opr/detopr/bin
#     pathmunge /cds/home/opr/hplopr/bin
#     pathmunge /cds/home/opr/mecopr/bin
#     pathmunge /cds/home/opr/mfxopr/bin
#     pathmunge /cds/home/opr/rixopr/bin
#     pathmunge /cds/home/opr/tmoopr/bin
#     pathmunge /cds/home/opr/uedopr/bin
#     pathmunge /cds/home/opr/xcsopr/bin
#     pathmunge /cds/home/opr/xppopr/bin

# *Optional*
# Do you work with accelerator-side tools often? Consider uncommenting the
# following if so:
#     pathmunge /afs/slac/g/lcls/tools/script

# *************************
# ** Navigation settings **
# *************************

# If you type just a directory name, assume that you want to cd into that
# directory.  Otherwise, you would just see the message
#     "-bash: ./the_directory: Is a directory"
shopt -s autocd 2> /dev/null

# This allows you to bookmark your favorite places across the file system.
# Define a variable containing a path and you will be able to cd into it
# regardless of the directory you're in
shopt -s cdable_vars

# Examples:
# If you keep your git repositories in $HOME/Repos, you could do the following:
#    export repos="$HOME/Repos"
# Then:
#    $ $repos/pcdsdevices
#    $ $repos/lightpath
#

# ****************************
# ** Miscellaneous settings **
# ****************************

# Update window size after every command.
shopt -s checkwinsize

# Automatically trim long paths in the prompt.
PROMPT_DIRTRIM=2

# Enable history expansion with space.
# E.g. typing !!<space> will replace the !! with your last command
bind Space:magic-space

# Disable ctrl-s/ctrl-q - these can cause real confusion.
stty stop ''
stty start ''
stty -ixon
stty -ixoff


# ***********************
# ** Shortcut Settings **
# ***********************

# For git_setup_fork and git_sync_upstream
export GITHUB_USERNAME="${USER}"
export GITHUB_UPSTREAM="upstream"
export GITHUB_ORIGIN="origin"
export GITHUB_MASTER="master"


# ***************
# ** Now what? **
# ***************
#
# * Do you want to add your own scripts directory? You could use:
#
#   mkdir $HOME/bin
#   pathmunge $HOME/bin
#
# * Do you want to automatically use the latest conda environment?
#
#   [ -d /cds/group/pcds ] && source /cds/group/pcds/pyps/conda/pcds_conda
#
# * Do you want to set up a development area for Python code?
#
#   See the "Testing packages" sections for recommended workflows.
#   https://confluence.slac.stanford.edu/display/PCDS/PCDS+Conda+Python+Environments
